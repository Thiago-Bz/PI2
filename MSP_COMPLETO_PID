#include <msp430g2553.h>

long temp;
long temperatura;
int tim, i, o;
int angle=85;


#pragma vector=PORT1_VECTOR
__interrupt void p1int()
{
    tim = (angle*8.333)/90; //era 180

  for(i=0; i<tim;i++){
     __delay_cycles(2000);

  }
P1OUT |= BIT7;
__delay_cycles(1000);

P1OUT &=~BIT7;

P1IFG &= ~BIT3; // limpa flag de interrupcao do pino P1.3
}


int main()
{
WDTCTL = WDTPW + WDTHOLD; // desativa watchdog
BCSCTL1 = CALBC1_1MHZ;
DCOCTL = CALDCO_1MHZ;

// conversao AD
WDTCTL = WDTPW + WDTHOLD;
ADC10CTL1 = INCH_0 + ADC10DIV_3; //PINO P1.0 A0
ADC10CTL0 = SREF_1 + ADC10SHT_3 + REFON + ADC10ON + ADC10IE;
//----------------------- pinos de saida de temp LED
P1DIR |= BIT6; // P1.6 como saida
P1OUT &=~BIT6;
//-------- Atraso para o AD
//__enable_interrupt();                     // Enable interrupts.
//TACCR0 = 30;                              // Delay to allow Ref to settle
//TACCTL0 |= CCIE;                          // Compare-mode interrupt.
//TACTL = TASSEL_2 | MC_1;                  // TACLK = SMCLK, Up mode.
//LPM0;                                     // Wait for delay.
//TACCTL0 &= ~CCIE;                         // Disable timer Interrupt
//__disable_interrupt();
//---------

P1DIR |= BIT7; // define P1.0 e P1.7 como saida
//P1DIR |= BIT0;
P1OUT &=~BIT7;
//P1OUT &=~BIT0;
P1REN |=BIT3; // habilita R pull-up/pull-down em P1.3
P1OUT &=~BIT3; // define como pull-up
P1IE |= BIT3; // habilita interrupcao do pino P1.3
P1IFG &= ~BIT3; // limpa flag de interrupcao do pino
__enable_interrupt(); // habilita as interrupcoes mascaraveis (seta GIE)
while(1)
{
    ADC10CTL0 &= ~ENC;
    while (ADC10CTL1 & BUSY);
   ADC10CTL0 |= ENC + ADC10SC;             // Sampling and conversion start
   __bis_SR_register(CPUOFF + GIE);        // LPM0 with interrupts enabled
   temp = ADC10MEM;
   temperatura = temp/6.82;
   if(temperatura >25.0){
       P1OUT|= BIT6;

       angle = 90;

 //      for (o=0;o<90;o++){

//       __delay_cycles(20000);
//       angle = o;
//       }
//       o=0;
   }else
       P1OUT&=~BIT6;
       angle=85;
   }

   __no_operation();


}
// ADC10 interrupt service routine
#pragma vector=ADC10_VECTOR
__interrupt void ADC10_ISR (void)
{
  __bic_SR_register_on_exit(CPUOFF);        // Clear CPUOFF bit from 0(SR)
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt void ta0_isr(void)
{
  TACTL = 0;
  LPM0_EXIT;                                // Exit LPM0 on return
}
