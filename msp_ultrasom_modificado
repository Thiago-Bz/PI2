#include <msp430g2452.h>

int miliseconds;
int distance;
long sensor;
//trigger p1.1 e Echo p1.2-- led da placa p1.0
//testando trigger p1.6 e echo p1.7
void main(void)
{
  BCSCTL1 = CALBC1_1MHZ;
  DCOCTL = CALDCO_1MHZ;                     // clock 1mhz
  WDTCTL = WDTPW + WDTHOLD;                 // desliga o WDT

  CCTL0 = CCIE;                             // CCR0 desabilita a interrup√ßao
  CCR0 = 1000;                  // 1ms - 1mhz
  TACTL = TASSEL_2 + MC_1;                  // SMCLK, upmode

  P1IFG  = 0x00;                //limpa as flags de interrupcoes
  P1DIR |= BIT0;                            // P1.0 como saida para os LED
  P1OUT &= ~BIT0;                           // desliga leds

  _BIS_SR(GIE);                         // global interrupt enable

 while(1){
//    P1IE &= ~0x01;          // disablita interrupcao
//    P1DIR |= 0x02;          // trigger como output
//    P1OUT |= 0x02;          // generate pulse
    P1IE &= ~BIT0;          // disabilita interrupcao
    P1DIR |= BIT6;          // trigger pin como saida 
    P1OUT |= BIT6;          // generate pulse 
    __delay_cycles(10);             // dalay de 10us

    P1OUT &= ~BIT6;                 // stop pulse 
    P1DIR &= ~BIT7;         // make pin P1.2 entrada (ECHO) 
        P1IFG = 0x00;                   // limpa flag de interrupcao 

    P1IE |= BIT7;           // habilita interupt no pino ECHO
    P1IES &= ~BIT7;         // rising edge on ECHO pin 
        __delay_cycles(30000);          // delay de 30ms (tempo para a onda voltar no echo)
        distance = sensor/58;           // converter para cm (ECHO) 
        if(distance < 20 && distance != 0) P1OUT |= BIT0;  //aciona o led dependendo da distancia, no caso 20cm .
        else P1OUT &= ~BIT0;




 }
}

#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
    if(P1IFG&BIT7)  //se houver interrupcap
        {
          if(!(P1IES&BIT7)) // rising edge?
          {
            TACTL|=TACLR;   // limpa o timer A
            miliseconds = 0;
            P1IES |= BIT7;  //borda de descida
          }
          else
          {
            sensor = (long)miliseconds*1000 + (long)TAR;    //calcula distancia ECHO

          }
    P1IFG &= ~BIT7;             //limpa a flag
    }
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A (void)
{
  miliseconds++;
}



